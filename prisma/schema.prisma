generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String                @map("name")
  email               String                @unique @map("email")
  password            String                @map("password")
  role                Role                  @default(USER)
  active              Boolean               @default(false)
  avatar              String                @default("")
  FileMovieDocumental FileMovieDocumental[]
  FileSerie           FileSerie[]
  files               File[]
}

model UrlCom {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  type StreamType @map("type")
  url  String     @map("url")
}

model StreamUrl {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @map("name")
  url      String     @map("url")
  active   Boolean    @map("active")
  type     StreamType @map("type")
  password String     @map("password")
}

model File {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @map("name")
  size     Int      @map("size")
  url      String   @map("url")
  filename String   @map("filename")
  encoding String   @map("encoding")
  type     Type
  subtype  SubType
  create   DateTime @default(now())
  Serie    Serie?   @relation(fields: [serieId], references: [id])
  serieId  String?  @db.ObjectId
  Movie    Movie?   @relation(fields: [movieId], references: [id])
  movieId  String?  @db.ObjectId
  User     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
}

model FileMovieDocumental {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @map("name")
  size     Int       @map("size")
  url      String    @map("url")
  filename String    @map("filename")
  encoding String    @map("encoding")
  duration Int       @map("duration")
  type     TypeMedia
  create   DateTime  @default(now())
  movieId  String    @unique @db.ObjectId
  userId   String    @db.ObjectId
  User     User      @relation(fields: [userId], references: [id])
  Movie    Movie     @relation(fields: [movieId], references: [id])
}

model FileSerie {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @map("name")
  size     Int       @map("size")
  url      String    @map("url")
  filename String    @map("filename")
  encoding String    @map("encoding")
  duration Int       @map("duration")
  type     TypeMedia
  season   Int
  create   DateTime  @default(now())
  serieId  String    @db.ObjectId
  userId   String    @db.ObjectId
  User     User      @relation(fields: [userId], references: [id])
  Serie    Serie     @relation(fields: [serieId], references: [id])
}

model Config {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  visibility        Boolean @default(true)
  acceptProductions Boolean @default(false)
  createAdmis       Boolean @default(false)
}

model Serie {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @map("name")
  folderName String      @unique @map("folderName")
  sinopsis   String      @map("sinopsis")
  imgs       File[]
  avatar     String      @map("avatar")
  year       String      @map("year")
  pdr        String      @map("pdr") // Productora
  initDate   String      @map("initDate")
  finishDate String      @map("finishDate")
  season     String      @map("season")
  FileMedia  FileSerie[]
}

model Movie {
  id         String               @id @default(auto()) @map("_id") @db.ObjectId
  name       String               @map("name")
  folderName String               @unique @map("folderName")
  sinopsis   String               @map("sinopsis")
  imgs       File[]
  avatar     String               @map("avatar")
  pdr        String               @map("pdr") // Productora 
  premier    String               @map("premier")
  FileMedia  FileMovieDocumental?
}

model Calendar {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  initDate   DateTime  @map("initDate") @db.Date
  finishDate DateTime  @map("finishDate") @db.Date
  initHour   String    @map("initHour")
  finishHour String    @map("finishHour")
  mediaId    String    @map("mediaId")
  type       TypeMedia
}

enum TypeMedia {
  MOVIE
  SERIE
  DOCUMENTAL
}

enum Role {
  USER
  ADMIN
}

enum Type {
  DOCUMENT
  VIDEO
  AUDIO
  IMAGE
}

enum StreamType {
  DEV
  PROD
}

enum SubType {
  PDF
  WORD
  EXCEL
  MP4
  MKV
  MOV
  WAV
  MP3
  JPG
  JPEG
  PNG
  ICO
}
